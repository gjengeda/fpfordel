name: Build, push, and deploy

on:
  push:
    branches:
      - master 
env:
  ORACLE_SID: XE
  CLUSTER: dev-fss
  NAMESPACE: t4
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_BASE: docker.pkg.github.com/${{ github.repository }}/fpfordel
         
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
    
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
     
      - uses: actions/setup-java@v1
        with:
          java-version: 1.11
          
      - name: Hent tag    
        run: echo "::set-env name=TAG::$(git log -1 --pretty='%ad' --date=format:'%Y%m%d%H%M%S')-$(echo $GITHUB_SHA | cut -c1-7)"  
           
      - name: Hent Oracle image
        shell: bash
        run: |
          echo "Starter Oracle image"
          docker run -d -p 1521:1521 --name oracle-xe -e ORACLE_DISABLE_ASYNCH_IO=true wnameless/oracle-xe-11g-r2
     
      - name: Vent 60 sekunder på Oracle oppstart
        shell: bash
        run: |
          echo "Venter på oppstart av Oracle"
          docker ps
          sleep 60 
          docker cp initdb.sql `docker ps | tail -1 | awk  '{ print $1}'`:/initdb.sql
          docker exec -e ORACLE_SID=$ORACLE_SID -e PATH=$PATH:$ORACLE_HOME/bin -e ORACLE_HOME=/u01/app/oracle/product/11.2.0/xe `docker ps | tail -1 | awk  '{ print $1}'` /u01/app/oracle/product/11.2.0/xe/bin/sqlplus system/oracle @initdb.sql
   
      - name: Kompiler
        run: |
          echo "::set-env name=IMAGE::$IMAGE_BASE:$TAG" 
          mvn --quiet clean install --batch-mode --settings .github/workflows/.m2/settings.xml -Dchangelist= -Dsha1=-$TAG
        env:
          GITHUB_USERNAME: x-access-token
          GITHUB_PASSWORD: ${{ secrets.GHA }}  
     
      - name: Bygg, tag og push Docker image  
        run: |
          docker build --tag ${IMAGE} --tag ${IMAGE_BASE}:latest .
          echo  ${GITHUB_TOKEN} | docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} --password-stdin
          docker push ${IMAGE_BASE}   
    
      - name: Deploy til dev-fss t4
        uses: nais/deploy/actions/deploy@v1 
        env:
          DRY_RUN: false
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: naiserator.yaml
          PRINT_PAYLOAD: true
          VARS: dev-fss-t4.json
          
      - name: Informer om deployment i issue som kan kommenteres for å promotere til andre miljøer
        if: success()
        run: |
         echo "Lager  issue for $TAG"
             curl -X POST \
            --url  https://api.github.com/repos/${{ github.repository }}/issues \
            --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --header "content-type: application/json" \
            --data '{
              "labels": ["deployment"],
              "title": "Deployment av ${{env.TAG}} til dev-fss var OK",
              "body":  "Kommenter med <b>/promote ${{env.TAG}} env namespace</b>, hvor <b>env</b> er et gyldig clusternavn og <b>namespace</b> et eksisterende namespace i det clusteret. Kommenter med <b>/prod</b> for å deploye trunk fra master til prod"
            }'     
